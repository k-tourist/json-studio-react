[{"/Users/sujin.lee/Documents/react-json-editor/src/App.tsx":"1","/Users/sujin.lee/Documents/react-json-editor/src/reportWebVitals.ts":"2","/Users/sujin.lee/Documents/react-json-editor/src/index.tsx":"3","/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/ajv.ts":"4","/Users/sujin.lee/Documents/react-json-editor/src/assets/jsonlint/index.ts":"5","/Users/sujin.lee/Documents/react-json-editor/src/assets/jsonlint/jsonlint.js":"6","/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/index.ts":"7","/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/json-editor.tsx":"8","/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/utils.tsx":"9","/Users/sujin.lee/Documents/react-json-editor/src/components/command-bar/index.ts":"10","/Users/sujin.lee/Documents/react-json-editor/src/components/command-bar/command-bar.tsx":"11","/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/file.tsx":"12"},{"size":608,"mtime":1611307252723,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1611262583361,"results":"15","hashOfConfig":"14"},{"size":615,"mtime":1611306580999,"results":"16","hashOfConfig":"14"},{"size":311,"mtime":1609961454800,"results":"17","hashOfConfig":"14"},{"size":61,"mtime":1611306580999,"results":"18","hashOfConfig":"14"},{"size":19911,"mtime":1611262593487,"results":"19","hashOfConfig":"14"},{"size":31,"mtime":1611262583253,"results":"20","hashOfConfig":"14"},{"size":4061,"mtime":1611307544296,"results":"21","hashOfConfig":"14"},{"size":1707,"mtime":1611307008916,"results":"22","hashOfConfig":"14"},{"size":44,"mtime":1611262583242,"results":"23","hashOfConfig":"14"},{"size":3068,"mtime":1611307117795,"results":"24","hashOfConfig":"14"},{"size":526,"mtime":1611307901688,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eida9j",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":1,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sujin.lee/Documents/react-json-editor/src/App.tsx",[],"/Users/sujin.lee/Documents/react-json-editor/src/reportWebVitals.ts",[],["54","55"],"/Users/sujin.lee/Documents/react-json-editor/src/index.tsx",[],"/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/ajv.ts",[],["56","57"],"/Users/sujin.lee/Documents/react-json-editor/src/assets/jsonlint/index.ts",[],"/Users/sujin.lee/Documents/react-json-editor/src/assets/jsonlint/jsonlint.js",["58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"/* Json generated parser */\nvar jsonlint = (function () {\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      error: 2,\n      JSONString: 3,\n      STRING: 4,\n      JSONNumber: 5,\n      NUMBER: 6,\n      JSONNullLiteral: 7,\n      NULL: 8,\n      JSONBooleanLiteral: 9,\n      TRUE: 10,\n      FALSE: 11,\n      JSONText: 12,\n      JSONValue: 13,\n      EOF: 14,\n      JSONObject: 15,\n      JSONArray: 16,\n      \"{\": 17,\n      \"}\": 18,\n      JSONMemberList: 19,\n      JSONMember: 20,\n      \":\": 21,\n      \",\": 22,\n      \"[\": 23,\n      \"]\": 24,\n      JSONElementList: 25,\n      $accept: 0,\n      $end: 1,\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"STRING\",\n      6: \"NUMBER\",\n      8: \"NULL\",\n      10: \"TRUE\",\n      11: \"FALSE\",\n      14: \"EOF\",\n      17: \"{\",\n      18: \"}\",\n      21: \":\",\n      22: \",\",\n      23: \"[\",\n      24: \"]\",\n    },\n    productions_: [\n      0,\n      [3, 1],\n      [5, 1],\n      [7, 1],\n      [9, 1],\n      [9, 1],\n      [12, 2],\n      [13, 1],\n      [13, 1],\n      [13, 1],\n      [13, 1],\n      [13, 1],\n      [13, 1],\n      [15, 2],\n      [15, 3],\n      [20, 3],\n      [19, 1],\n      [19, 3],\n      [16, 2],\n      [16, 3],\n      [25, 1],\n      [25, 3],\n    ],\n    performAction: function anonymous(yytext, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 1: // replace escaped characters with actual character\n          this.$ = yytext\n            .replace(/\\\\(\\\\|\")/g, \"$\" + \"1\")\n            .replace(/\\\\n/g, \"\\n\")\n            .replace(/\\\\r/g, \"\\r\")\n            .replace(/\\\\t/g, \"\\t\")\n            .replace(/\\\\v/g, \"\\v\")\n            .replace(/\\\\f/g, \"\\f\")\n            .replace(/\\\\b/g, \"\\b\");\n\n          break;\n        case 2:\n          this.$ = Number(yytext);\n          break;\n        case 3:\n          this.$ = null;\n          break;\n        case 4:\n          this.$ = true;\n          break;\n        case 5:\n          this.$ = false;\n          break;\n        case 6:\n          return (this.$ = $$[$0 - 1]);\n          break;\n        case 13:\n          this.$ = {};\n          break;\n        case 14:\n          this.$ = $$[$0 - 1];\n          break;\n        case 15:\n          this.$ = [$$[$0 - 2], $$[$0]];\n          break;\n        case 16:\n          this.$ = {};\n          this.$[$$[$0][0]] = $$[$0][1];\n          break;\n        case 17:\n          this.$ = $$[$0 - 2];\n          $$[$0 - 2][$$[$0][0]] = $$[$0][1];\n          break;\n        case 18:\n          this.$ = [];\n          break;\n        case 19:\n          this.$ = $$[$0 - 1];\n          break;\n        case 20:\n          this.$ = [$$[$0]];\n          break;\n        case 21:\n          this.$ = $$[$0 - 2];\n          $$[$0 - 2].push($$[$0]);\n          break;\n      }\n    },\n    table: [\n      {\n        3: 5,\n        4: [1, 12],\n        5: 6,\n        6: [1, 13],\n        7: 3,\n        8: [1, 9],\n        9: 4,\n        10: [1, 10],\n        11: [1, 11],\n        12: 1,\n        13: 2,\n        15: 7,\n        16: 8,\n        17: [1, 14],\n        23: [1, 15],\n      },\n      {\n        1: [3],\n      },\n      {\n        14: [1, 16],\n      },\n      {\n        14: [2, 7],\n        18: [2, 7],\n        22: [2, 7],\n        24: [2, 7],\n      },\n      {\n        14: [2, 8],\n        18: [2, 8],\n        22: [2, 8],\n        24: [2, 8],\n      },\n      {\n        14: [2, 9],\n        18: [2, 9],\n        22: [2, 9],\n        24: [2, 9],\n      },\n      {\n        14: [2, 10],\n        18: [2, 10],\n        22: [2, 10],\n        24: [2, 10],\n      },\n      {\n        14: [2, 11],\n        18: [2, 11],\n        22: [2, 11],\n        24: [2, 11],\n      },\n      {\n        14: [2, 12],\n        18: [2, 12],\n        22: [2, 12],\n        24: [2, 12],\n      },\n      {\n        14: [2, 3],\n        18: [2, 3],\n        22: [2, 3],\n        24: [2, 3],\n      },\n      {\n        14: [2, 4],\n        18: [2, 4],\n        22: [2, 4],\n        24: [2, 4],\n      },\n      {\n        14: [2, 5],\n        18: [2, 5],\n        22: [2, 5],\n        24: [2, 5],\n      },\n      {\n        14: [2, 1],\n        18: [2, 1],\n        21: [2, 1],\n        22: [2, 1],\n        24: [2, 1],\n      },\n      {\n        14: [2, 2],\n        18: [2, 2],\n        22: [2, 2],\n        24: [2, 2],\n      },\n      {\n        3: 20,\n        4: [1, 12],\n        18: [1, 17],\n        19: 18,\n        20: 19,\n      },\n      {\n        3: 5,\n        4: [1, 12],\n        5: 6,\n        6: [1, 13],\n        7: 3,\n        8: [1, 9],\n        9: 4,\n        10: [1, 10],\n        11: [1, 11],\n        13: 23,\n        15: 7,\n        16: 8,\n        17: [1, 14],\n        23: [1, 15],\n        24: [1, 21],\n        25: 22,\n      },\n      {\n        1: [2, 6],\n      },\n      {\n        14: [2, 13],\n        18: [2, 13],\n        22: [2, 13],\n        24: [2, 13],\n      },\n      {\n        18: [1, 24],\n        22: [1, 25],\n      },\n      {\n        18: [2, 16],\n        22: [2, 16],\n      },\n      {\n        21: [1, 26],\n      },\n      {\n        14: [2, 18],\n        18: [2, 18],\n        22: [2, 18],\n        24: [2, 18],\n      },\n      {\n        22: [1, 28],\n        24: [1, 27],\n      },\n      {\n        22: [2, 20],\n        24: [2, 20],\n      },\n      {\n        14: [2, 14],\n        18: [2, 14],\n        22: [2, 14],\n        24: [2, 14],\n      },\n      {\n        3: 20,\n        4: [1, 12],\n        20: 29,\n      },\n      {\n        3: 5,\n        4: [1, 12],\n        5: 6,\n        6: [1, 13],\n        7: 3,\n        8: [1, 9],\n        9: 4,\n        10: [1, 10],\n        11: [1, 11],\n        13: 30,\n        15: 7,\n        16: 8,\n        17: [1, 14],\n        23: [1, 15],\n      },\n      {\n        14: [2, 19],\n        18: [2, 19],\n        22: [2, 19],\n        24: [2, 19],\n      },\n      {\n        3: 5,\n        4: [1, 12],\n        5: 6,\n        6: [1, 13],\n        7: 3,\n        8: [1, 9],\n        9: 4,\n        10: [1, 10],\n        11: [1, 11],\n        13: 31,\n        15: 7,\n        16: 8,\n        17: [1, 14],\n        23: [1, 15],\n      },\n      {\n        18: [2, 17],\n        22: [2, 17],\n      },\n      {\n        18: [2, 15],\n        22: [2, 15],\n      },\n      {\n        22: [2, 21],\n        24: [2, 21],\n      },\n    ],\n    defaultActions: {\n      16: [2, 6],\n    },\n    parseError: function parseError(str, hash) {\n      throw new Error(str);\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n      //this.reductionCount = this.shiftCount = 0;\n\n      this.lexer.setInput(input);\n      this.lexer.yy = this.yy;\n      this.yy.lexer = this.lexer;\n      if (typeof this.lexer.yylloc == \"undefined\") this.lexer.yylloc = {};\n      var yyloc = this.lexer.yylloc;\n      lstack.push(yyloc);\n\n      if (typeof this.yy.parseError === \"function\")\n        this.parseError = this.yy.parseError;\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      function lex() {\n        var token;\n        token = self.lexer.lex() || 1; // $end = 1\n        // if token isn't its numeric value, convert\n        if (typeof token !== \"number\") {\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n\n      var symbol,\n        preErrorSymbol,\n        state,\n        action,\n        a,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol == null) symbol = lex();\n          // read action for current state and first input\n          action = table[state] && table[state][symbol];\n        }\n\n        // handle parse error\n        _handle_error: if (\n          typeof action === \"undefined\" ||\n          !action.length ||\n          !action[0]\n        ) {\n          if (!recovering) {\n            // Report error\n            expected = [];\n            for (p in table[state])\n              if (this.terminals_[p] && p > 2) {\n                expected.push(\"'\" + this.terminals_[p] + \"'\");\n              }\n            var errStr = \"\";\n            if (this.lexer.showPosition) {\n              errStr =\n                \"Parse error on line \" +\n                (yylineno + 1) +\n                \":\\n\" +\n                this.lexer.showPosition() +\n                \"\\nExpecting \" +\n                expected.join(\", \") +\n                \", got '\" +\n                this.terminals_[symbol] +\n                \"'\";\n            } else {\n              errStr =\n                \"Parse error on line \" +\n                (yylineno + 1) +\n                \": Unexpected \" +\n                (symbol == 1 /*EOF*/\n                  ? \"end of input\"\n                  : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n            }\n            this.parseError(errStr, {\n              text: this.lexer.match,\n              token: this.terminals_[symbol] || symbol,\n              line: this.lexer.yylineno,\n              loc: yyloc,\n              expected: expected,\n            });\n          }\n\n          // just recovered from another error\n          if (recovering == 3) {\n            if (symbol == EOF) {\n              throw new Error(errStr || \"Parsing halted.\");\n            }\n\n            // discard current lookahead and grab another\n            yyleng = this.lexer.yyleng;\n            yytext = this.lexer.yytext;\n            yylineno = this.lexer.yylineno;\n            yyloc = this.lexer.yylloc;\n            symbol = lex();\n          }\n\n          // try to recover from error\n          while (1) {\n            // check for error recovery rule in this state\n            if (TERROR.toString() in table[state]) {\n              break;\n            }\n            if (state == 0) {\n              throw new Error(errStr || \"Parsing halted.\");\n            }\n            popStack(1);\n            state = stack[stack.length - 1];\n          }\n\n          preErrorSymbol = symbol; // save the lookahead token\n          symbol = TERROR; // insert generic error symbol as new lookahead\n          state = stack[stack.length - 1];\n          action = table[state] && table[state][TERROR];\n          recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\n            \"Parse Error: multiple actions possible at state: \" +\n              state +\n              \", token: \" +\n              symbol\n          );\n        }\n\n        switch (action[0]) {\n          case 1: // shift\n            //this.shiftCount++;\n\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]); // push state\n            symbol = null;\n            if (!preErrorSymbol) {\n              // normal execution/no error\n              yyleng = this.lexer.yyleng;\n              yytext = this.lexer.yytext;\n              yylineno = this.lexer.yylineno;\n              yyloc = this.lexer.yylloc;\n              if (recovering > 0) recovering--;\n            } else {\n              // error just occurred, resume old lookahead f/ before error\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n            break;\n\n          case 2: // reduce\n            //this.reductionCount++;\n\n            len = this.productions_[action[1]][1];\n\n            // perform semantic action\n            yyval.$ = vstack[vstack.length - len]; // default to $$ = $1\n            // default location, uses first token for firsts, last for lasts\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column,\n            };\n            r = this.performAction.call(\n              yyval,\n              yytext,\n              yyleng,\n              yylineno,\n              this.yy,\n              action[1],\n              vstack,\n              lstack\n            );\n\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n\n            // pop off stack\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            // goto new state = table[STATE][NONTERMINAL]\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3: // accept\n            return true;\n        }\n      }\n\n      return true;\n    },\n  };\n  /* Jison generated lexer */\n  var lexer = (function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parseError) {\n          this.yy.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      setInput: function (input) {\n        this._input = input;\n        this._more = this._less = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0,\n        };\n        return this;\n      },\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/\\n/);\n        if (lines) this.yylineno++;\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      unput: function (ch) {\n        this._input = ch + this._input;\n        return this;\n      },\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      less: function (n) {\n        this._input = this.match.slice(n) + this._input;\n      },\n      pastInput: function () {\n        var past = this.matched.substr(\n          0,\n          this.matched.length - this.match.length\n        );\n        return (\n          (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\")\n        );\n      },\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(\n          /\\n/g,\n          \"\"\n        );\n      },\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) this.done = true;\n\n        var token, match, tempMatch, index, col, lines;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (!this.options.flex) break;\n          }\n        }\n        if (match) {\n          lines = match[0].match(/\\n.*/g);\n          if (lines) this.yylineno += lines.length;\n          this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines\n              ? lines[lines.length - 1].length - 1\n              : this.yylloc.last_column + match[0].length,\n          };\n          this.yytext += match[0];\n          this.match += match[0];\n          this.yyleng = this.yytext.length;\n          this._more = false;\n          this._input = this._input.slice(match[0].length);\n          this.matched += match[0];\n          token = this.performAction.call(\n            this,\n            this.yy,\n            this,\n            rules[index],\n            this.conditionStack[this.conditionStack.length - 1]\n          );\n          if (this.done && this._input) this.done = false;\n          if (token) return token;\n          else return;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          this.parseError(\n            \"Lexical error on line \" +\n              (this.yylineno + 1) +\n              \". Unrecognized text.\\n\" +\n              this.showPosition(),\n            {\n              text: \"\",\n              token: null,\n              line: this.yylineno,\n            }\n          );\n        }\n      },\n      lex: function lex() {\n        var r = this.next();\n        if (typeof r !== \"undefined\") {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      popState: function popState() {\n        return this.conditionStack.pop();\n      },\n      _currentRules: function _currentRules() {\n        return this.conditions[\n          this.conditionStack[this.conditionStack.length - 1]\n        ].rules;\n      },\n      topState: function () {\n        return this.conditionStack[this.conditionStack.length - 2];\n      },\n      pushState: function begin(condition) {\n        this.begin(condition);\n      },\n    };\n    lexer.options = {};\n    lexer.performAction = function anonymous(\n      yy,\n      yy_,\n      $avoiding_name_collisions,\n      YY_START\n    ) {\n      var YYSTATE = YY_START;\n      switch ($avoiding_name_collisions) {\n        case 0:\n          /* skip whitespace */\n          break;\n        case 1:\n          return 6;\n          break;\n        case 2:\n          yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);\n          return 4;\n          break;\n        case 3:\n          return 17;\n          break;\n        case 4:\n          return 18;\n          break;\n        case 5:\n          return 23;\n          break;\n        case 6:\n          return 24;\n          break;\n        case 7:\n          return 22;\n          break;\n        case 8:\n          return 21;\n          break;\n        case 9:\n          return 10;\n          break;\n        case 10:\n          return 11;\n          break;\n        case 11:\n          return 8;\n          break;\n        case 12:\n          return 14;\n          break;\n        case 13:\n          return \"INVALID\";\n          break;\n      }\n    };\n    lexer.rules = [\n      /^(?:\\s+)/,\n      /^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/,\n      /^(?:\"(?:\\\\[\\\\\"bfnrt/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f\"])*\")/,\n      /^(?:\\{)/,\n      /^(?:\\})/,\n      /^(?:\\[)/,\n      /^(?:\\])/,\n      /^(?:,)/,\n      /^(?::)/,\n      /^(?:true\\b)/,\n      /^(?:false\\b)/,\n      /^(?:null\\b)/,\n      /^(?:$)/,\n      /^(?:.)/,\n    ];\n    lexer.conditions = {\n      INITIAL: {\n        rules: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n        inclusive: true,\n      },\n    };\n\n    return lexer;\n  })();\n  parser.lexer = lexer;\n  return parser;\n})();\nif (typeof require !== \"undefined\" && typeof exports !== \"undefined\") {\n  exports.parser = jsonlint;\n  exports.parse = jsonlint.parse.bind(jsonlint);\n}\n",["87","88"],"/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/index.ts",[],"/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/json-editor.tsx",[],"/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/utils.tsx",[],"/Users/sujin.lee/Documents/react-json-editor/src/components/command-bar/index.ts",[],"/Users/sujin.lee/Documents/react-json-editor/src/components/command-bar/command-bar.tsx",[],"/Users/sujin.lee/Documents/react-json-editor/src/components/json-editor/file.tsx",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"91","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":75,"column":7,"nodeType":"97","messageId":"98","endLine":132,"endColumn":8},{"ruleId":"99","severity":1,"message":"100","line":78,"column":39,"nodeType":"101","messageId":"102","endLine":78,"endColumn":40},{"ruleId":"103","severity":1,"message":"104","line":101,"column":11,"nodeType":"105","messageId":"106","endLine":101,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":397,"column":9,"nodeType":"109","messageId":"110","endLine":397,"endColumn":10},{"ruleId":"111","severity":1,"message":"112","line":418,"column":9,"nodeType":"113","messageId":"114","endLine":492,"endColumn":10},{"ruleId":"115","severity":1,"message":"116","line":418,"column":9,"nodeType":"109","messageId":"117","endLine":418,"endColumn":22,"fix":"118"},{"ruleId":"119","severity":1,"message":"120","line":447,"column":25,"nodeType":"101","messageId":"121","endLine":447,"endColumn":27},{"ruleId":"119","severity":1,"message":"120","line":461,"column":26,"nodeType":"101","messageId":"121","endLine":461,"endColumn":28},{"ruleId":"119","severity":1,"message":"120","line":462,"column":24,"nodeType":"101","messageId":"121","endLine":462,"endColumn":26},{"ruleId":"119","severity":1,"message":"120","line":480,"column":23,"nodeType":"101","messageId":"121","endLine":480,"endColumn":25},{"ruleId":"95","severity":1,"message":"96","line":504,"column":9,"nodeType":"97","messageId":"98","endLine":573,"endColumn":10},{"ruleId":"103","severity":1,"message":"104","line":576,"column":7,"nodeType":"122","messageId":"106","endLine":576,"endColumn":19},{"ruleId":"107","severity":1,"message":"123","line":656,"column":45,"nodeType":"109","messageId":"110","endLine":656,"endColumn":48},{"ruleId":"107","severity":1,"message":"124","line":747,"column":11,"nodeType":"109","messageId":"110","endLine":747,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":748,"column":7,"nodeType":"97","messageId":"98","endLine":792,"endColumn":8},{"ruleId":"103","severity":1,"message":"104","line":754,"column":11,"nodeType":"105","messageId":"106","endLine":754,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":758,"column":11,"nodeType":"105","messageId":"106","endLine":758,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":761,"column":11,"nodeType":"105","messageId":"106","endLine":761,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":764,"column":11,"nodeType":"105","messageId":"106","endLine":764,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":767,"column":11,"nodeType":"105","messageId":"106","endLine":767,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":770,"column":11,"nodeType":"105","messageId":"106","endLine":770,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":773,"column":11,"nodeType":"105","messageId":"106","endLine":773,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":776,"column":11,"nodeType":"105","messageId":"106","endLine":776,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":779,"column":11,"nodeType":"105","messageId":"106","endLine":779,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":782,"column":11,"nodeType":"105","messageId":"106","endLine":782,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":785,"column":11,"nodeType":"105","messageId":"106","endLine":785,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":788,"column":11,"nodeType":"105","messageId":"106","endLine":788,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":791,"column":11,"nodeType":"105","messageId":"106","endLine":791,"endColumn":17},{"ruleId":"125","severity":1,"message":"126","line":797,"column":7,"nodeType":"127","messageId":"121","endLine":797,"endColumn":75},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],["128"],["129"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-unused-vars","'a' is defined but never used.","Identifier","unusedVar","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'_handle_error:' is defined but never used.","unused",{"range":"130","text":"131"},"eqeqeq","Expected '===' and instead saw '=='.","unexpected","ReturnStatement","'col' is defined but never used.","'YYSTATE' is assigned a value but never used.","no-control-regex","Unexpected control character(s) in regular expression: \\x09, \\x0a, \\x1f.","Literal","no-global-assign","no-unsafe-negation",[8020,8035],""]